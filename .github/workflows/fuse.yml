name: Fuse Typefaces

on:
  schedule:
    - cron: "0 * * * *" # 每小时运行一次

  workflow_dispatch:

jobs:
  check_updates:
    runs-on: ubuntu-latest
    outputs:
      is_updated: ${{ steps.check_release.outputs.is_updated }}
      jetbrains_release: ${{ steps.check_release.outputs.jetbrains_release }}
      maple_release: ${{ steps.check_release.outputs.maple_release }}

    steps:
      - name: 🔄 Checkout Repository
        uses: actions/checkout@v4

      - name: 获取上一次的 run_id
        run: |
          PREV_RUN_ID=$(gh run list --workflow "$GITHUB_WORKFLOW" --limit 2 --json databaseId --jq '.[1].databaseId')
          echo "PREV_RUN_ID=$PREV_RUN_ID" >> $GITHUB_ENV
          echo "$PREV_RUN_ID"
        env:
          GH_TOKEN: ${{ secrets.FUSION_JET_BRAINS_MAPLE_MONO_TOKEN }}

      - name: 🔍 Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: release
          run-id: ${{ env.PREV_RUN_ID }}
          github-token: ${{ secrets.FUSION_JET_BRAINS_MAPLE_MONO_TOKEN }}

      - name: Display structure of downloaded files
        run: ls -R

      - name: 🔍 Check Latest Release Updates
        id: check_release
        run: |
          JETBRAINS_RELEASE=$(curl -s https://api.github.com/repos/JetBrains/JetBrainsMono/releases/latest | jq -r '.tag_name')
          MAPLE_RELEASE=$(curl -s https://api.github.com/repos/subframe7536/maple-font/releases/latest | jq -r '.tag_name')

          echo "Latest JetBrains Mono Release: $JETBRAINS_RELEASE"
          echo "Latest Maple Font Release: $MAPLE_RELEASE"

          PREV_JETBRAINS_RELEASE=$(cat jetbrains_release.txt 2>/dev/null || echo "")
          PREV_MAPLE_RELEASE=$(cat maple_release.txt 2>/dev/null || echo "")

          if [[ "$JETBRAINS_RELEASE" != "$PREV_JETBRAINS_RELEASE" || "$MAPLE_RELEASE" != "$PREV_MAPLE_RELEASE" ]]; then
            echo "is_updated=true" >> $GITHUB_OUTPUT
            echo "$JETBRAINS_RELEASE" > jetbrains_release.txt
            echo "$MAPLE_RELEASE" > maple_release.txt
            echo "jetbrains_release=$JETBRAINS_RELEASE" > $GITHUB_OUTPUT
            echo "maple_release=$MAPLE_RELEASE" > $GITHUB_OUTPUT
          else
            echo "is_updated=false" >> $GITHUB_OUTPUT
            echo "$JETBRAINS_RELEASE" > jetbrains_release.txt #
            echo "$MAPLE_RELEASE" > maple_release.txt #
            echo "jetbrains_release=$JETBRAINS_RELEASE" > $GITHUB_OUTPUT  #
            echo $JETBRAINS_RELEASE  ##
            echo "maple_release=$MAPLE_RELEASE" > $GITHUB_OUTPUT  #
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-info
          path: "*release.txt"

  fuse_and_commit:
    runs-on: ubuntu-latest
    needs: check_updates
    # if: needs.check_updates.outputs.is_updated == 'false'

    steps:
      - name: 🔄 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13.2"

      # - name: 📦 Install Dependencies
      #   run: |
      #     pip install gftools fonttools

      # - name: 🔽 Clone and Build JetBrains Mono from Source
      #   run: |
      #     git clone --depth 1 https://github.com/JetBrains/JetBrainsMono.git
      #     cd JetBrainsMono
      #     gftools builder sources/config.yaml
      #     cd ..
      #     mkdir -p fonts/jetbrains
      #     cp -r JetBrainsMono/fonts/ttf/* fonts/jetbrains/

      # - name: 🔽 Clone and Build Maple Font from Source
      #   run: |
      #     git clone --depth 1 https://github.com/subframe7536/maple-font.git
      #     cd maple-font
      #     pip install -r requirements.txt
      #     python build.py --normal --no-hinted --no-nerd-font --ttf-only --cn --liga
      #     cd ..
      #     mkdir -p fonts/maple
      #     cp -r maple-font/fonts/TTF/* fonts/maple/

      # - name: 🎯 Fuse JetBrains Mono & Maple Font
      #   run: |
      #     mkdir -p fused_fonts
      #     for style in Regular Bold Italic BoldItalic ExtraLight ExtraLightItalic Light LightItalic Medium MediumItalic SemiBold SemiBoldItalic Thin ThinItalic ExtraBold ExtraBoldItalic; do
      #       JETBRAINS_FONT="fonts/jetbrains/JetBrainsMono-${style}.ttf"
      #       MAPLE_FONT="fonts/maple/MapleMonoNormal-${style}.ttf"
      #       if [[ -f "$JETBRAINS_FONT" && -f "$MAPLE_FONT" ]]; then
      #         echo "Fusing $JETBRAINS_FONT and $MAPLE_FONT..."
      #         pyftmerge "$MAPLE_FONT" "$JETBRAINS_FONT"
      #         mv merged.ttf "fused_fonts/JetBrainsMapleMono-${style}.ttf"
      #       fi
      #     done

      # - name: 📦 Create ZIP Archive
      #   run: |
      #     zip -r JetBrainsMapleMono.zip fused_fonts/

      - name: 🔢 Generate Tag Name
        id: generate_tag
        run: |
          JETBRAINS_VERSION="${{ needs.check_updates.outputs.jetbrains_release }}"
          MAPLE_VERSION="${{ needs.check_updates.outputs.maple_release }}"

          # 去掉 v 前缀
          JETBRAINS_VERSION_CLEANED=$(echo "$JETBRAINS_VERSION" | sed 's/^v//')
          MAPLE_VERSION_CLEANED=$(echo "$MAPLE_VERSION" | sed 's/^v//')

          # 去掉 . 号
          JETBRAINS_VERSION_CLEANED=$(echo "$JETBRAINS_VERSION_CLEANED" | tr -d '.')
          MAPLE_VERSION_CLEANED=$(echo "$MAPLE_VERSION_CLEANED" | tr -d '.')

          # 组合成最终的 tag_name
          TAG_NAME="1.${JETBRAINS_VERSION_CLEANED}.${MAPLE_VERSION_CLEANED}"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "Generated tag: $TAG_NAME"

      - name: 🚀 Publish to GitHub Releases
        uses: softprops/action-gh-release@v1
        with:
          files: JetBrainsMapleMono.zip
          tag_name: ${{ env.TAG_NAME }}
          name: ${{ env.TAG_NAME }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.FUSION_JET_BRAINS_MAPLE_MONO_TOKEN }}
